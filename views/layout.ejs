<!DOCTYPE html>
<html>
  <head>
    <title><%- title %></title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

    
    <!--  
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `link` tags, or asynchronously
        on the client using a solution like AMD (RequireJS).  Or, if you like, you can
        take advantage of Sails' boilerplate asset management.

        By default, stylesheets from your `assets/linker/styles` folder are included
        here automatically.  Both CSS (.css) and LESS (.less) are supported.
        In production, your styles will be minified and concatenated into a single file.
        
        To customize any part of the built-in behavior, just edit your Gruntfile.
        For example, here are a few things you could do:
            
            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/linker/styles/bootstrap.css">
    <link rel="stylesheet" href="/linker/styles/bootstrap-theme.css">
    <link rel="stylesheet" href="/linker/styles/login.css">
    <!--STYLES END-->
  </head>

  <body>
    <div id="app"></div>
    <%- body %>

    <!--
        Client-side Templates
        ========================

    		HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/linker/templates` folder, then
        include them here automatically.
        
        To customize this behavior to fit your needs, just edit your Gruntfile.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your templates using a server-side stringfile
              before they're served.
    -->

    <!--TEMPLATES-->
    
    <script id="layoutTemplate" type="text/x-handlebars-template">
      <nav class="navbar navbar-fixed-top navbar-inverse" role="navigation">
        <!-- Brand and toggle get grouped for better mobile display -->
        <div class="navbar-header">
          <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </button>
          <a class="navbar-brand" href="#">March Madness</a>
        </div>

        <!-- Collect the nav links, forms, and other content for toggling -->
        <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
          <ul id="poolDropDown" class="nav navbar-nav">
          </ul>
          <ul class="nav navbar-nav navbar-right">
            <li class="dropdown">
              <a href="#" class="dropdown-toggle" data-toggle="dropdown">
                <%= CurrentUser.first_name + " " + CurrentUser.last_name %>
                <b class="caret"></b>
              </a>
              <ul class="dropdown-menu">
                <li><a href="#">Edit Profile (TBD)</a></li>
                <li class="divider"></li>
                <li><a href="/logout">Log Out</a></li>
              </ul>
            </li>
          </ul>
        </div><!-- /.navbar-collapse -->
      </nav>
      <div id="content"></div>
      <div id="module"></div>
      <!-- <div id="bracketConainter" class="sheet"></div> -->
    </script>

    <script id="poolDropDownTemplate" type="text/x-handlebars-template">
      <a href="#" class="dropdown-toggle" data-toggle="dropdown">Pools <b class="caret"></b></a>
      <ul id="poolDropDown" class="dropdown-menu">
        <div class="currentPools"></div>
        <li class="divider"></li>
        <li><a id="createNewPool" href="#">Create a Pool</a></li>
      </ul>
    </script>
    
    <script id="poolDropdownItemTemplate" type="text/x-handlebars-template">
      <a href="#/pool/{{id}}">{{name}}</a>
    </script>

    <script id="newPoolForm" type="text/x-handlebars-template">
    <div class="modal-dialog">
      <form role="form" class="modal-content">
        <div class="modal-header">
          <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
          <h4 class="modal-title" id="myModalLabel">Create Pool</h4>
        </div>
        <div class="form-group modal-body">
          <label for="poolName">Name</label>
          <input id="poolName" name="name" placeholder="Name" type="text" class="form-control" />
        </div>
        <div class="modal-footer">
          <button type="submit" class="btn btn-primary">Create</button>
        </div>
      </form>
    </div>
    </script>
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can 
      take advantage of Sails' boilerplate asset management.

      By default, filesin your `assets/linker/js` folder are included here
      automatically.  Both JavaScript (.js) and CoffeeScript (.coffee) are supported.
      In production, your scripts will be minified and concatenated into a single file.
      
      To customize any part of the built-in behavior, just edit your Gruntfile.
      For example, here are a few things you could do:
          
          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/js/vendor/jquery.min.js"></script>
    <script src="/js/vendor/jquery.serializeJSON.js"></script>
    <script src="/js/vendor/json2.js"></script>
    <script src="/js/vendor/underscore.js"></script>
    <script src="/js/vendor/handlebars-v1.1.2.js"></script>
    <script src="/js/vendor/backbone.js"></script>
    <script src="/js/vendor/backbone.babysitter.js"></script>
    <script src="/js/vendor/backbone.wreqr.js"></script>
    <script src="/js/vendor/backbone.marionette.js"></script>
    <script src="/js/vendor/bootstrap.js"></script>

    <script src="/js/app.js"></script>
    <!--SCRIPTS END-->
  </body>
</html>
